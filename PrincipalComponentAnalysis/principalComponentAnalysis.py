# -*- coding: utf-8 -*-
"""PCA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZTj8h9oJ3ecrqTiNginXA8ZIUVbmbr7K

#Principal Component Analysis

**Import Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""**Import Dataset**

"""

df=pd.read_csv("Wine.csv")
x=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

print(x)
print(y)

"""**Splitting the data into train set and test set**"""

from sklearn.model_selection import train_test_split
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.2,random_state=0)

"""***Feature Scalling***"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
train_x=sc.fit_transform(train_x)
test_x=sc.transform(test_x)

print(train_x)

"""**Applying PCA**"""

from sklearn.decomposition import PCA
pc=PCA(n_components=2)
train_x=pc.fit_transform(train_x)
test_x=pc.transform(test_x)

print(train_x)

"""**Training the model on logistic regression**



"""

from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(train_x, train_y)

"""**Confusion Matrix**"""

from sklearn.metrics import confusion_matrix, accuracy_score
y_pred = classifier.predict(test_x)
cm = confusion_matrix(test_y, y_pred)
print(cm)
accuracy_score(test_y, y_pred)

"""**Visualizing Training set Results**"""

from matplotlib.colors import ListedColormap
X_set, y_set = train_x, train_y
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)
plt.title('Logistic Regression (Training set)')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.legend()
plt.show()

"""**Visualizing Test Set results**"""

from matplotlib.colors import ListedColormap
X_set, y_set = test_x,test_y
X1, X2 = np.meshgrid(np.arange(start = X_set[:, 0].min() - 1, stop = X_set[:, 0].max() + 1, step = 0.01),
                     np.arange(start = X_set[:, 1].min() - 1, stop = X_set[:, 1].max() + 1, step = 0.01))
plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape),
             alpha = 0.75, cmap = ListedColormap(('red', 'green', 'blue')))
plt.xlim(X1.min(), X1.max())
plt.ylim(X2.min(), X2.max())
for i, j in enumerate(np.unique(y_set)):
    plt.scatter(X_set[y_set == j, 0], X_set[y_set == j, 1],
                c = ListedColormap(('red', 'green', 'blue'))(i), label = j)
plt.title('Logistic Regression (Test set)')
plt.xlabel('PC1')
plt.ylabel('PC2')
plt.legend()
plt.show()